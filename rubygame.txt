class RockPaperScissors
  CHOICES = ['rock', 'paper', 'scissors'].freeze

  def initialize
    @player_score = 0
    @computer_score = 0
  end

  def play
    puts "Welcome to Rock, Paper, Scissors Game!\n"

    loop do
      player_choice = get_player_choice
      computer_choice = get_computer_choice

      puts "\nPlayer chose: #{player_choice.capitalize}"
      puts "Computer chose: #{computer_choice.capitalize}"

      determine_winner(player_choice, computer_choice)

      display_scores
      break unless play_again?
    end

    puts "Thanks for playing!"
  end

  private

  def get_player_choice
    loop do
      print "Enter your choice (Rock, Paper, or Scissors): "
      choice = gets&.chomp&.downcase
      return choice if CHOICES.include?(choice)

      puts "Invalid choice. Please enter Rock, Paper, or Scissors."
    end
  end

  def get_computer_choice
    CHOICES.sample
  end

  def determine_winner(player_choice, computer_choice)
    if player_choice == computer_choice
      puts "It's a tie!"
    elsif (player_choice == 'rock' && computer_choice == 'scissors') ||
          (player_choice == 'scissors' && computer_choice == 'paper') ||
          (player_choice == 'paper' && computer_choice == 'rock')
      puts "Congratulations! You win!"
      @player_score += 1
    else
      puts "Sorry, you lose."
      @computer_score += 1
    end
  end

  def display_scores
    puts "\nScores:"
    puts "Player: #{@player_score} | Computer: #{@computer_score}"
  end

  def play_again?
    print "Do you want to play again? (yes/no): "
    gets&.chomp&.downcase == 'yes'
  end
end

# Example of the game flow:
game = RockPaperScissors.new
game.play
