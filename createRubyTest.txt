require 'minitest/autorun'

class TestCMS < Minitest::Test
  def setup
    @cms = CMS.new
    @admin_user = @cms.add_user("admin", "admin_password", "Admin")
    @editor_user = @cms.add_user("editor", "editor_password", "Editor")
  end

  def test_user_authentication
    authenticated_user = @cms.authenticate("admin", "admin_password")
    assert_equal @admin_user, authenticated_user
  end

  def test_invalid_user_authentication
    assert_raises(RuntimeError) do
      @cms.authenticate("nonexistent_user", "invalid_password")
    end
  end

  def test_add_and_list_articles
    admin_user_authenticated = @cms.authenticate("admin", "admin_password")

    article = @cms.add_article(admin_user_authenticated, "Introduction to Ruby", "Ruby is a dynamic programming language.", "Programming")

    assert_equal 1, @cms.list_articles.length
    assert_equal "Introduction to Ruby (Programming)", @cms.list_articles.first
  end

  def test_delete_article
    admin_user_authenticated = @cms.authenticate("admin", "admin_password")

    @cms.add_article(admin_user_authenticated, "Introduction to Ruby", "Ruby is a dynamic programming language.", "Programming")

    assert_equal 1, @cms.list_articles.length

    @cms.delete_article(admin_user_authenticated, "Introduction to Ruby")

    assert_equal 0, @cms.list_articles.length
  end

  def test_update_article
    admin_user_authenticated = @cms.authenticate("admin", "admin_password")

    article = @cms.add_article(admin_user_authenticated, "Introduction to Ruby", "Ruby is a dynamic programming language.", "Programming")

    updated_article = @cms.update_article(admin_user_authenticated, "Introduction to Ruby", "Updated content.")

    assert_equal "Updated content.", updated_article.content
  end

  def test_unauthorized_delete_article_by_editor
    editor_user_authenticated = @cms.authenticate("editor", "editor_password")

    @cms.add_article(editor_user_authenticated, "Introduction to Ruby", "Ruby is a dynamic programming language.", "Programming")

    assert_raises(RuntimeError) do
      @cms.delete_article(editor_user_authenticated, "Introduction to Ruby")
    end
  end

  def test_unauthorized_update_article_by_editor
    editor_user_authenticated = @cms.authenticate("editor", "editor_password")

    @cms.add_article(editor_user_authenticated, "Introduction to Ruby", "Ruby is a dynamic programming language.", "Programming")

    assert_raises(RuntimeError) do
      @cms.update_article(editor_user_authenticated, "Introduction to Ruby", "Updated content.")
    end
  end
end
